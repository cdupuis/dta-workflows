name: build-push

on:
  workflow_call:
    inputs:
      file:
        required: true
        type: string
      dockerfile:
        required: false
        type: string
      intoto-statements:
        required: false
        type: string
    secrets:
      docker_hub_user:
        required: true  
      docker_hub_password:
        required: true

env:
  dockerfile: ${{ inputs.dockerfile || inputs.file }}

jobs:
  build:

    runs-on: ubuntu-latest
    
    permissions:
      contents: read
      packages: write
      id-token: write
      attestations: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3 

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3        

      - name: Log into registry
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.docker_hub_user }}
          password: ${{ secrets.docker_hub_password }}

      - name: Extract Docker metadata
        id: metadata
        uses: cdupuis/dta-workflows@main
        with:
          stage: metadata-attest
          file: ${{ inputs.file }}

      - name: Build Docker image
        id: build-oci
        uses: docker/build-push-action@v6     
        env:
          DOCKER_BUILD_RECORD_UPLOAD: false
          DOCKER_BUILD_SUMMARY: false
        with:
          context: .
          file: ${{ env.dockerfile }}
          push: false
          tags: ${{ env.DTA_IMAGE_TAGS }}
          sbom: generator=docker/scout-sbom-indexer:1
          platforms: ${{ env.DTA_IMAGE_PLATFORMS }}
          outputs: type=oci,dest=./oci,tar=false,compression=zstd,compression-level=22,force-compression=true,rewrite-timestamp=true
          build-args: SOURCE_DATE_EPOCH=0
      
      - name: Restore clamav databases cache
        uses: actions/cache/restore@v4
        with:
          path: |
            ./databases
          key: clamav-db

      - name: Run clamav scan
        run: |
          # run clamav scan; fail if malware/virus is found
          docker run --rm -v ./databases:/var/lib/clamav -v .:/scandir -v ./tmp:/logs clamav/clamav:stable clamscan /scandir/oci --log /logs/clamav.log --exclude-dir /scandir/databases --recursive -a -v

          # fix permissions
          sudo chmod +r ./tmp/clamav.log 

          # generate in-toto statement
          cat << EOF > clamav-scan.json 
          {
              "_type": "https://in-toto.io/Statement/v0.1",
              "subject": [],
              "predicateType": "https://clamav.net/scan/v1",
              "predicate": {
                  "scanner": {
                  "uri": "clamav/clamav:stable",
                  "report": "$(cat ./tmp/clamav.log | base64 -w 0)"
                  }
              }
          }
          EOF

          echo "$(cat clamav-scan.json)"


      - name: Compare Docker image
        if: ${{ github.event_name == 'pull_request' }}
        run: |
          sed -i 's#"org\.opencontainers\.image\.ref\.name":"[^"]*"#"org.opencontainers.image.ref.name":"${{ env.DTA_IMAGE_IMAGE }}"#' ./oci/index.json
          
          curl -sSfL https://raw.githubusercontent.com/docker/scout-cli/main/install.sh | sh -s --

          echo ""
          echo ""

          tags=$(echo "${{ env.DTA_IMAGE_TAGS }}" | tr -d '\n' | tr -d ' ')
          IFS=',' read -ra TAGS <<< "$tags"
          for tag in "${TAGS[@]}"; do
            echo "Comparing to ${tag}"
            echo "-----------------------------------------------------------------------"
            docker scout compare oci-dir://./oci --to ${tag} --ignore-unchanged || true
            echo "-----------------------------------------------------------------------"
          done
        
      - name: Log into refrerrer registry
        if: ${{ github.event_name != 'pull_request' }}
        uses: docker/login-action@v3
        with:
          registry: registry.scout.docker.com
          username: ${{ secrets.docker_hub_user }}
          password: ${{ secrets.docker_hub_password }}

      - name: Sign and attest in-toto statements
        if: ${{ github.event_name != 'pull_request' }}
        id: predicate-attest
        uses: cdupuis/dta-workflows@main
        with:
          stage: predicate-attest
          image: ./oci
          tags: ${{ env.DTA_IMAGE_TAGS }}
          organization: ${{ secrets.docker_hub_user }}
          intoto-statements: ${{ inputs.intoto-statements }},clamav-scan.json

      - name: Sign and attest Docker image
        if: ${{ github.event_name != 'pull_request' }}
        id: sign-attest
        uses: cdupuis/dta-workflows@main
        with:
          stage: sign-attest
          image: ./oci
          file: ${{ env.dockerfile }}
          tags: ${{ env.DTA_IMAGE_TAGS }}
          organization: ${{ secrets.docker_hub_user }}

      - name: Generate artifact attestation
        if: ${{ env.DTA_IMAGE_CHANGED == 'true' && github.event_name != 'pull_request' }}
        uses: actions/attest-build-provenance@v2
        with:
          subject-name: ${{ env.DTA_IMAGE_REPO }}
          subject-digest: ${{ steps.build-oci.outputs.digest }}        

      - name: Verify and attest Docker image
        if: ${{ env.DTA_IMAGE_CHANGED == 'true' && github.event_name != 'pull_request' }}
        id: verify-attest
        uses: cdupuis/dta-workflows@main
        with:
          stage: verify-attest
          image: ${{ env.DTA_IMAGE_IMAGE }}
          tags: ${{ env.DTA_IMAGE_TAGS }}
          organization: ${{ secrets.docker_hub_user }}
